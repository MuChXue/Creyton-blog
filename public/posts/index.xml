<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Z的世界</title>
    <link>https://muchxue.github.io/Creyton-blog/posts/</link>
    <description>Recent content in Posts on Z的世界</description>
    <generator>Hugo</generator>
    <language>en-zh</language>
    <lastBuildDate>Tue, 04 Mar 2025 20:26:04 +0800</lastBuildDate>
    <atom:link href="https://muchxue.github.io/Creyton-blog/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Redis_demo_2_查询缓存</title>
      <link>https://muchxue.github.io/Creyton-blog/posts/redis_demo_2_%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98/</link>
      <pubDate>Tue, 04 Mar 2025 20:26:04 +0800</pubDate>
      <guid>https://muchxue.github.io/Creyton-blog/posts/redis_demo_2_%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98/</guid>
      <description>&lt;h2 id=&#34;1-什么是缓存&#34;&gt;1. 什么是缓存？&lt;/h2&gt;&#xA;&lt;p&gt;缓存就是数据交换的缓冲区（Cache），是存贮数据的临时地方，一般读写性能较高。&lt;/p&gt;&#xA;&lt;p&gt;在实际开发中，系统需要避震器，防止过高的数据量猛冲系统，导致其操作线程无法及时处理信息而瘫痪。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MuChXue/Creyton-blog/main/images/c3f7e9b2-bf66-46d9-a701-dd84fee3b88a.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-添加商户缓存&#34;&gt;2. 添加商户缓存&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MuChXue/Creyton-blog/main/images/1653322097736.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;3-添加商户类型缓存&#34;&gt;3. 添加商户类型缓存&lt;/h2&gt;&#xA;&lt;p&gt;与商户数据缓存类似，尝试完成商户类型数据缓存&lt;/p&gt;&#xA;&lt;p&gt;在ShopTypeController中&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@RestController&#xA;@RequestMapping(&amp;#34;/shop-type&amp;#34;)&#xA;public class ShopTypeController {&#xA;    @Resource&#xA;    private IShopTypeService typeService;&#xA;&#xA;    @GetMapping(&amp;#34;list&amp;#34;)&#xA;    public Result queryTypeList() {&#xA;        return typeService.queryByShopType();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在ShopTypeServiceImpl中&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@Service&#xA;public class ShopTypeServiceImpl extends ServiceImpl&amp;lt;ShopTypeMapper, ShopType&amp;gt; implements IShopTypeService {&#xA;&#xA;    @Resource&#xA;    StringRedisTemplate stringRedisTemplate;&#xA;&#xA;    @Override&#xA;    public Result queryByShopType() {&#xA;        String key = CACHE_SHOP_TYPE_KEY;&#xA;        // 1.从redis中查询商铺类型缓存&#xA;        String shopTypeJson = stringRedisTemplate.opsForValue().get(key);&#xA;        // 2.判断缓存是否命中&#xA;        if (StrUtil.isNotBlank(shopTypeJson)) {&#xA;            // 3.命中，返回商铺类型信息&#xA;            List&amp;lt;ShopType&amp;gt; shopTypeList = JSONUtil.toList(shopTypeJson, ShopType.class);&#xA;            return Result.ok(shopTypeList);&#xA;        }&#xA;        // 4.未命中，查询数据库&#xA;        List&amp;lt;ShopType&amp;gt; shopTypeList = query().orderByAsc(&amp;#34;sort&amp;#34;).list();&#xA;        // 5.判断数据库中是否存在&#xA;        if (shopTypeList.isEmpty()) {&#xA;            // 6.不存在，返回错误&#xA;            return Result.fail(&amp;#34;商铺类型不存在！&amp;#34;);&#xA;        }&#xA;        // 7.存在，将商铺类型写入redis&#xA;        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(shopTypeList));&#xA;        // 8.返回商铺类型信息&#xA;        return Result.ok(shopTypeList);&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;4-缓存更新&#34;&gt;4. 缓存更新&lt;/h2&gt;&#xA;&lt;p&gt;缓存更新的目的是为了节约Redis中的内存，为避免缓存过多，Redis会对部分数据进行更新。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Redis-demo-1短信登录</title>
      <link>https://muchxue.github.io/Creyton-blog/posts/redis_demo_1_%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81/</link>
      <pubDate>Tue, 04 Mar 2025 20:10:15 +0800</pubDate>
      <guid>https://muchxue.github.io/Creyton-blog/posts/redis_demo_1_%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81/</guid>
      <description></description>
    </item>
  </channel>
</rss>
